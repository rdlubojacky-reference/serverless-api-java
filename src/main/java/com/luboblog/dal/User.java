package com.luboblog.dal;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import org.apache.log4j.Logger;

@DynamoDBTable(tableName = "PLACEHOLDER_USERS_TABLE_NAME")
public class User {
    Logger logger = Logger.getLogger(this.getClass());

    private static final String USERS_TABLE_NAME = System.getenv("USERS_TABLE_NAME");

    private String id;
    private String firstName;
    private String lastName;

    private DynamoDBAdapter db_adapter;
    private AmazonDynamoDB client;
    private DynamoDBMapper mapper;

    public User() {
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
            .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(USERS_TABLE_NAME))
            .build();
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBAttribute(attributeName = "first_name")
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @DynamoDBAttribute(attributeName = "last_name")
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    public List<User> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<User> results = this.mapper.scan(User.class, scanExp);
        for (User p : results) {
          logger.info("Products - list(): " + p.toString());
        }
        return results;
    }

    public User get(String id) throws IOException {
        User user = null;
    
        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));
    
        DynamoDBQueryExpression<User> queryExp = new DynamoDBQueryExpression<User>()
            .withKeyConditionExpression("id = :v1")
            .withExpressionAttributeValues(av);
    
        PaginatedQueryList<User> result = this.mapper.query(User.class, queryExp);
        if (result.size() > 0) {
          user = result.get(0);
          logger.info("Users - get(): user - " + user.toString());
        } else {
          logger.info("Users - get(): user - Not Found.");
        }
        return user;
    }

    public void save(User user) throws IOException {
        logger.info("Users - save(): " + user.toString());
        this.mapper.save(user);
    }

    public Boolean delete(String id) throws IOException {
        User user = null;
    
        // get product if exists
        user = get(id);
        if (user != null) {
          logger.info("Users - delete(): " + user.toString());
          this.mapper.delete(user);
        } else {
          logger.info("Users - delete(): user - does not exist.");
          return false;
        }
        return true;
    }
}