service: users-api

custom:
  usersTableName: 'java-users-${self:provider.stage}'

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["UsersDynamoDBTable", "Arn" ] }
  environment:
    USERS_TABLE_NAME: ${self:custom.usersTableName}

package:
  artifact: build/distributions/${self:service}-${self:provider.stage}.zip

functions:
  listUsers:
    handler: com.luboblog.ListUsersHandler
    events:
      - http:
          path: /users
          method: get
          cors: true

  getUser:
    handler: com.luboblog.GetUserHandler
    events:
      - http:
          path: /users/{id}
          method: get
          cors: true

  createUser:
    handler: com.luboblog.CreateUserHandler
    events:
      - http:
          path: /users
          method: post
          cors: true

  deleteUser:
    handler: com.luboblog.DeleteUserHandler
    events:
      - http:
          path: /users/{id}
          method: delete
          cors: true

resources:
  Resources:
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
